---
name: Build, Test and Deploy

env:
  RELEASE_NAME: myuw
  DJANGO_APP: myuw

on:
  push:
    branches: [master, qa, develop, feature/vue, vue/google-analytics]
  pull_request:
    branches: [master, qa, develop, feature/vue]
    types: [opened, reopened, synchronize]

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Context
        id: cicd
        uses: uw-it-aca/actions/cicd-context@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-$(echo ${{ hashFiles('Dockerfile') }} | head -c 16)
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build App Image
        uses: docker/build-push-action@v2
        with:
          target: app-container
          tags: ${{ steps.cicd.outputs.image_tag }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build Test Image
        uses: docker/build-push-action@v2
        with:
          target: app-test-container
          tags: app-test-container
          push: false
          load: true

      - name: Run Tests in Image
        id: tests
        shell: bash
        run: >-
          docker run -u root -t
          -v ${PWD}:/coverage
          -e DJANGO_APP="$DJANGO_APP"
          -e "ENV=localdev" -e "AUTH=SAML_MOCK"
          app-test-container
          bash -c ". ./docker/test_python.sh"

      - uses: actions/upload-artifact@v2
        with:
          name: python-coverage
          path: .coverage.*

      - name: Push Image to GCR
        if: github.event_name == 'push'
        uses: uw-it-aca/actions/gcr-push@v1.4
        with:
          image_tag: ${{ steps.cicd.outputs.image_tag }}
          gcp_json_key: ${{ secrets.GCP_JSON_KEY }}

    outputs:
      image_tag: ${{ steps.cicd.outputs.image_tag }}

  eslint:
    runs-on: ubuntu-18.04

    container:
      image: node:14.6.0-stretch

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install packages
        run: npm install .
      
      - name: Run eslint
        run: ./node_modules/.bin/eslint myuw/static/vue --ext .vue

  jest:
    runs-on: ubuntu-18.04

    container:
      image: node:14.6.0-stretch

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install packages
        run: npm install .
      
      - name: Run jest
        run: npx jest --ci --coverage myuw/*

      - uses: actions/upload-artifact@v2
        with:
          name: jest-coverage
          path: coverage/*

  # cypress:
  #   runs-on: ubuntu-18.04

  #   needs: build

  #   container:
  #     image: cypress/browsers:node12.18.3-chrome87-ff82

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2

  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-

  #     - name: Install node modules
  #       run: |
  #         cd e2e
  #         npm install .

  #     - name: Run cypress tests
  #       env:
  #         CYPRESS_BASE_URL: http://myuw:8000
  #       run: |
  #         cd e2e
  #         ./node_modules/.bin/cypress run
      
  #     # TODO: Make cypress collect the coverage report and store
  #     #       it as an artifact

  #     - name: Collect failure screenshots
  #       uses: actions/upload-artifact@v2
  #       if: failure()
  #       with:
  #         name: cypress-screenshots
  #         path: e2e/cypress/screenshots

  #   services:
  #     myuw:
  #       image: gcr.io/uwit-mci-axdd/${{needs.build.outputs.image_tag}}
  #       env:
  #         AUTH: SAML_MOCK
  #       ports:
  #         - 8000:8000

  collect-coverage:
    needs: [build, jest]
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: python-coverage
      
      - uses: actions/download-artifact@v2
        with:
          name: jest-coverage

      # TODO: Download the cypress coverage artifact

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Record Test Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gem install coveralls-lcov
          python -m pip install --upgrade pip coverage coveralls==2.2.0
          coverage combine
          coveralls-lcov -v -n lcov.info > js-coverage.json
          coveralls --merge=js-coverage.json

  deploy:
    if: github.event_name == 'push'

    needs: [build, eslint, jest]

    runs-on: ubuntu-18.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Context
        id: cicd
        uses: uw-it-aca/actions/cicd-context@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}

      - name: Deployment Pipeline
        if: >-
          contains(fromJSON('["main", "master", "qa"]'),
            steps.cicd.outputs.git_repo_branch)
        uses: uw-it-aca/actions/cicd-deploy@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}
          commit_hash: ${{ steps.cicd.outputs.commit_hash }}
          git_repo_branch: ${{ steps.cicd.outputs.git_repo_branch }}
          gh_auth_token: ${{ secrets.GH_AUTH_TOKEN }}

      - name: Deploy Develop Branch
        if: steps.cicd.outputs.git_repo_branch == 'develop'
        uses: uw-it-aca/actions/cicd-deploy@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}
          commit_hash: ${{ steps.cicd.outputs.commit_hash }}
          git_repo_branch: ${{ steps.cicd.outputs.git_repo_branch }}
          gh_auth_token: ${{ secrets.GH_AUTH_TOKEN }}
          app_instance: dev

      - name: Deploy Vue Branch
        if: steps.cicd.outputs.git_repo_branch == 'feature/vue'
        uses: uw-it-aca/actions/cicd-deploy@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}
          commit_hash: ${{ steps.cicd.outputs.commit_hash }}
          git_repo_branch: ${{ steps.cicd.outputs.git_repo_branch }}
          gh_auth_token: ${{ secrets.GH_AUTH_TOKEN }}
          app_instance: vue

      - name: Deploy Vue Branch
        if: steps.cicd.outputs.git_repo_branch == 'vue/google-analytics'
        uses: uw-it-aca/actions/cicd-deploy@v1.4
        with:
          release_name: ${{ env.RELEASE_NAME }}
          commit_hash: ${{ steps.cicd.outputs.commit_hash }}
          git_repo_branch: ${{ steps.cicd.outputs.git_repo_branch }}
          gh_auth_token: ${{ secrets.GH_AUTH_TOKEN }}
          app_instance: vue
